name: Build and Release

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  workflow_dispatch:

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      semver: ${{ steps.gitversion.outputs.semVer }}
      fullsemver: ${{ steps.gitversion.outputs.fullSemVer }}
      majorminorpatch: ${{ steps.gitversion.outputs.majorMinorPatch }}
      assemblysemver: ${{ steps.gitversion.outputs.assemblySemVer }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # GitVersion needs full history

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v1
        with:
          versionSpec: '6.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v1
        with:
          useConfigFile: true

      - name: Display GitVersion outputs
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.semVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.fullSemVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.majorMinorPatch }}"
          echo "AssemblySemVer: ${{ steps.gitversion.outputs.assemblySemVer }}"

  build-linux:
    name: Build Linux (SteamOS SDK)
    needs: version
    runs-on: ubuntu-latest
    container:
      image: registry.gitlab.steamos.cloud/steamrt/sniper/sdk
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
          
      - name: Rust version
        run: |
          . $HOME/.cargo/env
          rustc --version
          cargo --version

      - name: Update Cargo.toml version
        run: |
          . $HOME/.cargo/env
          sed -i 's/^version = .*/version = "${{ needs.version.outputs.majorminorpatch }}"/' Cargo.toml

      - name: Build release
        run: |
          . $HOME/.cargo/env
          cargo build --release

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: s2binlib-linux-x86_64
          path: target/release/libs2binlib.a

  build-windows:
    name: Build Windows
    needs: version
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Update Cargo.toml version
        shell: pwsh
        run: |
          $content = Get-Content Cargo.toml
          $content = $content -replace '^version = .*', 'version = "${{ needs.version.outputs.majorminorpatch }}"'
          Set-Content Cargo.toml $content

      - name: Build release
        run: cargo build --release

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: s2binlib-windows-x86_64
          path: |
            target/release/s2binlib.lib
            target/release/libs2binlib.a

  create-release:
    name: Create GitHub Release
    needs: [version, build-linux, build-windows]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release directory structure
        run: |
          mkdir -p release/linux
          mkdir -p release/windows
          mkdir -p release/include
          cp artifacts/s2binlib-linux-x86_64/libs2binlib.a release/linux/
          cp artifacts/s2binlib-windows-x86_64/s2binlib.lib release/windows/
          cp artifacts/s2binlib-windows-x86_64/libs2binlib.a release/windows/
          cp s2binlib.h release/include/
          
      - name: Create release archives
        run: |
          cd release
          tar -czf ../s2binlib-v${{ needs.version.outputs.semver }}-linux-x86_64.tar.gz linux/ include/
          tar -czf ../s2binlib-v${{ needs.version.outputs.semver }}-windows-x86_64.tar.gz windows/ include/
          cd ..
          
      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## s2binlib v${{ needs.version.outputs.semver }}
          
          ### Downloads
          - **Linux (x86_64)**: `s2binlib-v${{ needs.version.outputs.semver }}-linux-x86_64.tar.gz`
          - **Windows (x86_64)**: `s2binlib-v${{ needs.version.outputs.semver }}-windows-x86_64.tar.gz`
          
          ### Contents
          - Static libraries for Linux and Windows
          - C header file (s2binlib.h)
          
          ### Changes
          See commit history for details.
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.semver }}
          name: Release v${{ needs.version.outputs.semver }}
          body_path: release_notes.md
          draft: false
          prerelease: false
          files: |
            s2binlib-v${{ needs.version.outputs.semver }}-linux-x86_64.tar.gz
            s2binlib-v${{ needs.version.outputs.semver }}-windows-x86_64.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload combined release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: s2binlib-all-platforms
          path: release/
